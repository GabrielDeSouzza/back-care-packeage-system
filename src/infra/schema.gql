# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserModel {
  id: String!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CarePackageItemModel {
  id: ID!
  name: String!
  createdBy: String!
  updatedBy: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SignInResponseModel {
  token: String!
  email: String!
  name: String!
}

type CarePackageScheduleModel {
  id: ID!
  deliveryDate: DateTime!
  carePackageCount: Float!
}

type TypeCarePackageModel {
  id: ID!
  name: String!
  createdBy: String!
  updatedBy: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  itensName: [String!]!
}

type Query {
  getUser(email: String, id: String): UserModel!
  countCarePackageItems(where: CarePackageItemWhereInput): Int!
  getAllCarePackageItems(where: CarePackageItemWhereInput, sort: CarePackageItemOrderByWithRelationInput, limit: Int! = 25, offset: Int! = 0): [CarePackageItemModel!]!
  getCarePackageItem(request: GetCarePackageItemInput!): CarePackageItemModel!
  countCarePackageSchedules(where: CarePackageScheduleWhereInput): Int!
  getAllCarePackageSchedules(where: CarePackageScheduleWhereInput, sort: CarePackageScheduleOrderByWithRelationInput, limit: Int! = 25, offset: Int! = 0): [CarePackageScheduleModel!]!
  getCarePackageSchedule(request: GetCarePackageScheduleInput!): CarePackageScheduleModel!
  countTypeCarePackages(where: TypeCarePackageWhereInput): Int!
  getAllTypeCarePackages(where: TypeCarePackageWhereInput, sort: TypeCarePackageOrderByWithRelationInput, limit: Int! = 25, offset: Int! = 0): [TypeCarePackageModel!]!
  getTypeCarePackage(request: GetTypeCarePackageInput!): TypeCarePackageModel!
}

input CarePackageItemWhereInput {
  AND: [CarePackageItemWhereInput!]
  OR: [CarePackageItemWhereInput!]
  NOT: [CarePackageItemWhereInput!]
  id: StringFilter
  name: StringFilter
  createdBy: StringFilter
  updatedBy: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  CreatedBy: UserScalarRelationFilter
  UpdatedBy: UserScalarRelationFilter
  TypeCarePackage: TypeCarePackageListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UserScalarRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeFilter
  modified_at: DateTimeFilter
  PersonCreatedBy: PersonListRelationFilter
  PersonUpdatedBy: PersonListRelationFilter
  ChildCreatedBy: ChildListRelationFilter
  ChildUpdatedBy: ChildListRelationFilter
  TypeCarePackageCreatedBy: TypeCarePackageListRelationFilter
  TypeCarePackageUpdatedBy: TypeCarePackageListRelationFilter
  CarePackageItemCreatedBy: CarePackageItemListRelationFilter
  CarePackageItemUpdatedBy: CarePackageItemListRelationFilter
  CarePackageCreatedBy: CarePackageListRelationFilter
  CarePackageUpdatedBy: CarePackageListRelationFilter
}

input PersonListRelationFilter {
  every: PersonWhereInput
  some: PersonWhereInput
  none: PersonWhereInput
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: StringFilter
  name: StringFilter
  lastName: StringFilter
  document: IntFilter
  hasChild: BoolFilter
  dateBirth: DateTimeFilter
  gender: StringFilter
  createdBy: StringFilter
  updatedBy: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  CreatedBy: UserScalarRelationFilter
  UpdatedBy: UserScalarRelationFilter
  Child: ChildListRelationFilter
  CarePackage: CarePackageListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input ChildListRelationFilter {
  every: ChildWhereInput
  some: ChildWhereInput
  none: ChildWhereInput
}

input ChildWhereInput {
  AND: [ChildWhereInput!]
  OR: [ChildWhereInput!]
  NOT: [ChildWhereInput!]
  id: StringFilter
  name: StringFilter
  lastName: StringFilter
  dateBirh: DateTimeFilter
  createdBy: StringFilter
  updatedBy: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  responsibleId: StringFilter
  PersonResponsible: PersonScalarRelationFilter
  CreatedBy: UserScalarRelationFilter
  UpdatedBy: UserScalarRelationFilter
}

input PersonScalarRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

input CarePackageListRelationFilter {
  every: CarePackageWhereInput
  some: CarePackageWhereInput
  none: CarePackageWhereInput
}

input CarePackageWhereInput {
  AND: [CarePackageWhereInput!]
  OR: [CarePackageWhereInput!]
  NOT: [CarePackageWhereInput!]
  id: StringFilter
  numberControl: IntFilter
  typeCarePackageId: StringFilter
  personId: StringFilter
  carePackageScheduleId: StringFilter
  createdBy: StringFilter
  updatedBy: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  TypeCarePackage: TypeCarePackageScalarRelationFilter
  Person: PersonScalarRelationFilter
  CarePackageSchedule: CarePackageScheduleScalarRelationFilter
  CreatedBy: UserScalarRelationFilter
  UpdatedBy: UserScalarRelationFilter
}

input TypeCarePackageScalarRelationFilter {
  is: TypeCarePackageWhereInput
  isNot: TypeCarePackageWhereInput
}

input TypeCarePackageWhereInput {
  AND: [TypeCarePackageWhereInput!]
  OR: [TypeCarePackageWhereInput!]
  NOT: [TypeCarePackageWhereInput!]
  id: StringFilter
  name: StringFilter
  createdBy: StringFilter
  updatedBy: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  CreatedBy: UserScalarRelationFilter
  UpdatedBy: UserScalarRelationFilter
  CarePackage: CarePackageListRelationFilter
  CarePackageItem: CarePackageItemListRelationFilter
}

input CarePackageItemListRelationFilter {
  every: CarePackageItemWhereInput
  some: CarePackageItemWhereInput
  none: CarePackageItemWhereInput
}

input CarePackageScheduleScalarRelationFilter {
  is: CarePackageScheduleWhereInput
  isNot: CarePackageScheduleWhereInput
}

input CarePackageScheduleWhereInput {
  AND: [CarePackageScheduleWhereInput!]
  OR: [CarePackageScheduleWhereInput!]
  NOT: [CarePackageScheduleWhereInput!]
  id: StringFilter
  deliveryDate: DateTimeFilter
  carePackageCount: IntFilter
  CarePackage: CarePackageListRelationFilter
}

input TypeCarePackageListRelationFilter {
  every: TypeCarePackageWhereInput
  some: TypeCarePackageWhereInput
  none: TypeCarePackageWhereInput
}

input CarePackageItemOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdBy: SortOrder
  updatedBy: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  TypeCarePackage: TypeCarePackageOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input UserOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  email: SortOrder
  createdAt: SortOrder
  modified_at: SortOrder
  PersonCreatedBy: PersonOrderByRelationAggregateInput
  PersonUpdatedBy: PersonOrderByRelationAggregateInput
  ChildCreatedBy: ChildOrderByRelationAggregateInput
  ChildUpdatedBy: ChildOrderByRelationAggregateInput
  TypeCarePackageCreatedBy: TypeCarePackageOrderByRelationAggregateInput
  TypeCarePackageUpdatedBy: TypeCarePackageOrderByRelationAggregateInput
  CarePackageItemCreatedBy: CarePackageItemOrderByRelationAggregateInput
  CarePackageItemUpdatedBy: CarePackageItemOrderByRelationAggregateInput
  CarePackageCreatedBy: CarePackageOrderByRelationAggregateInput
  CarePackageUpdatedBy: CarePackageOrderByRelationAggregateInput
}

input PersonOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChildOrderByRelationAggregateInput {
  _count: SortOrder
}

input TypeCarePackageOrderByRelationAggregateInput {
  _count: SortOrder
}

input CarePackageItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input CarePackageOrderByRelationAggregateInput {
  _count: SortOrder
}

input GetCarePackageItemInput {
  id: ID
  name: String
}

input CarePackageScheduleOrderByWithRelationInput {
  id: SortOrder
  deliveryDate: SortOrder
  carePackageCount: SortOrder
  CarePackage: CarePackageOrderByRelationAggregateInput
}

input GetCarePackageScheduleInput {
  id: ID
  deliveryDate: DateTime
}

input TypeCarePackageOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdBy: SortOrder
  updatedBy: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  CarePackage: CarePackageOrderByRelationAggregateInput
  CarePackageItem: CarePackageItemOrderByRelationAggregateInput
}

input GetTypeCarePackageInput {
  id: ID
  name: String
}

type Mutation {
  createUser(data: CreateUserInput!): UserModel!
  createCarePackageItem(data: CreateCarePackageItemInput!): CarePackageItemModel!
  updateCarePackageItem(data: UpdateCarePackageItemInput!): CarePackageItemModel!
  signIn(email: String!, password: String!): SignInResponseModel!
  createCarePackageSchedule(data: CreateCarePackageScheduleInput!): CarePackageScheduleModel!
  updateCarePackageSchedule(data: UpdateCarePackageScheduleInput!): CarePackageScheduleModel!
  createTypeCarePackage(data: CreateTypeCarePackageInput!): TypeCarePackageModel!
  updateTypeCarePackage(data: UpdateTypeCarePackageInput!): TypeCarePackageModel!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input CreateCarePackageItemInput {
  name: String!
}

input UpdateCarePackageItemInput {
  oldName: ID!
  newName: String
}

input CreateCarePackageScheduleInput {
  deliveryDate: DateTime!
  carePackageCount: Float!
}

input UpdateCarePackageScheduleInput {
  oldDeliveryDate: DateTime
  newDeliveryDate: DateTime
  carePackageCount: Float
}

input CreateTypeCarePackageInput {
  name: String!
  itensName: [String!]!
}

input UpdateTypeCarePackageInput {
  id: String
  newName: String
  oldName: String
  deletedItensName: [String!]
  itensName: [String!]
}